public class Solution {
    public int integerReplacement(int n) {
        HashMap<Integer, Integer> counts = new HashMap<Integer, Integer>();
        return integerReplacementHelper(n, counts);
    }
    
    public int integerReplacementHelper(int n, HashMap<Integer, Integer> counts) {
        if(n == 1) return 0;
        if(counts.containsKey(n)) return counts.get(n);
        
        if(n % 2 == 0) {
            int val = integerReplacementHelper(n/2, counts) + 1;
            counts.put(n, val);
            return val;
        } else {
            int val = 0;
            if(n == Integer.MAX_VALUE) {
                val = integerReplacementHelper(n-1, counts);
            } else if(n == Integer.MIN_VALUE) {
                val = integerReplacementHelper(n+1, counts);
            } else {
                int p1 = integerReplacementHelper(n+1, counts) + 1;
                int m1 = integerReplacementHelper(n-1, counts) + 1;
                val = Math.min(p1, m1);
            }
            
            counts.put(n, val);
            return val;
        }
    }
}
