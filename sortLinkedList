/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null) return head;
        ListNode midNode = findMid(head);
        ListNode nextNode = midNode.next;
        midNode.next = null;
        ListNode firstHalf = sortList(head);
        ListNode secondHalf = sortList(nextNode);
        
        return mergeList(firstHalf, secondHalf);
    }
    
    public ListNode mergeList(ListNode l1, ListNode l2) {
        if(l1 == l2) return l1;
        ListNode dummy = new ListNode(0);
        ListNode cur = dummy;
        while(l1 != null && l2 != null) {
            if(l1.val <= l2.val) {
                cur.next = l1;
                l1 = l1.next;
                cur = cur.next;
            } else {
                cur.next = l2;
                l2 = l2.next;
                cur = cur.next;
            }
        }
        while(l1 != null) {
            cur.next = l1;
            l1 = l1.next;
            cur = cur.next;
        }
        while(l2 != null) {
            cur.next = l2;
            l2 = l2.next;
            cur = cur.next;
        }
        return dummy.next;
    }
    
    public ListNode findMid(ListNode head) {
        ListNode midNode = head;
        ListNode jumpNode = head.next;
        while(jumpNode != null && jumpNode.next != null) {
            midNode = midNode.next;
            jumpNode = jumpNode.next.next;
        }
        return midNode;
    }
}
