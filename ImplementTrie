class TrieNode {
    // Initialize your data structure here.
    TrieNode[] children;
    boolean isWord = false;
    public TrieNode() {
        children = new TrieNode[26];
    }
    
    public boolean contains(char c) {
        int index = (int)(c - 'a');
        if(children[index] == null) {
            return false;
        } else {
            return true;
        }
    }
    
    public TrieNode getChild(char c) {
        int index = (int)(c - 'a');
        return children[index];
    }
    
    public void addChild(char c) {
        int index = (int)(c- 'a');
        TrieNode newNode = new TrieNode();
        children[index] = newNode;
    }
    
    public void setIsWord(boolean isWord) {
        this.isWord = isWord;
    }
    
    public boolean isWord() {
        return this.isWord;
    }
}

public class Trie {
    private TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    public void insert(String word) {
        TrieNode node = root;
        for(int i = 0; i< word.length(); i++) {
            char c = word.charAt(i);
            if(!node.contains(c)) {
                node.addChild(c);
            }
            node = node.getChild(c);
        }
        node.setIsWord(true);
    }

    // Returns if the word is in the trie.
    public boolean search(String word) {
        TrieNode node = root;
        for(int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            if(node.contains(c)) node = node.getChild(c);
            else return false;
        }
        return node.isWord();
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    public boolean startsWith(String prefix) {
        TrieNode node = root;
        for(int i = 0; i < prefix.length(); i++) {
            char c = prefix.charAt(i);
            if(node.contains(c)) node = node.getChild(c);
            else return false;
        }
        return true;
    }
}

// Your Trie object will be instantiated and called as such:
// Trie trie = new Trie();
// trie.insert("somestring");
// trie.search("key");
