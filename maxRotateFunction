public class Solution {
    public int maxRotateFunction(int[] A) {
        int maxVal = Integer.MIN_VALUE;
        int n = A.length;
        if(n == 0) return 0;
        for(int i = 0; i < n; i++) {
            maxVal = Math.max(maxVal, calc(A, i, n));
        }
        return maxVal;
    }
    
    public int calc(int[] A, int startIndex, int n) {
        int index = startIndex;
        int val = 0;
        for(int i = 0; i< n ; i++) {
            val += index * A[i];
            index++;
            if(index == n) {
                index = 0;
            }
        }
        return val;
    }
}

O(n) solution from Discuss

public class Solution {
    public int maxRotateFunction(int[] A) {
        if (A == null || A.length == 0) {
            return 0;
        }
        int n = A.length;
        int sum = 0;
        int f0 = 0;
        for (int i = 0; i < n; i++) {
            sum += A[i];
            f0 += i * A[i];
        }
        int max = f0;
        for (int k = 1, fkminus1 = f0; k < n; k++) {
            int fk = fkminus1 + sum - n * A[n - k];
            max = Math.max(max, fk);
            fkminus1 = fk;
        }
        return max;
    }
}
