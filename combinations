public class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<Integer> current = new ArrayList<Integer>();
        dfs(result, current, 0, n, k);
        return result;
    }
    
    public void dfs(List<List<Integer>> result, List<Integer> current, int i, int n, int k) {
        if(i > n || k < 0) return;
        if(k == 0) {
            result.add(new ArrayList(current));
        } else {
            //here the n - k + 1 instead of n will speed up the process
            for(int j = i+1; j <= n - k + 1; j++) {
                current.add(j);
                dfs(result, current, j, n, k-1);
                current.remove(current.size()-1);
            }
        }
    }
}
