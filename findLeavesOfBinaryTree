/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> findLeaves(TreeNode root) {
        HashMap<Integer, List<Integer>> map = new HashMap<Integer, List<Integer>>();
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        
        if(root == null) return result;
        helper(root, map);
        for(int i = 0; i < map.keySet().size(); i++) {
            result.add(map.get(i));
        }
        return result;
    }
    
    public int helper(TreeNode root, HashMap<Integer, List<Integer>> map) {
        int level = 0;
        if(root == null) return 0;
        if(root.left == null && root.right == null) {
            level = 0;
        } else {
            int leftL = helper(root.left, map);
            int rightL = helper(root.right, map);
            level = Math.max(leftL, rightL) + 1;
        }
        
        if(!map.containsKey(level)) {
            map.put(level, new ArrayList<Integer>());
        }
        map.get(level).add(root.val);
        return level;
    }
}
