public class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> result = new ArrayList<Integer>();
        if(words.length == 0) return result;
        HashMap<String, Integer> count = new HashMap<String, Integer>();
        for(String word: words) {
            if(!count.containsKey(word)) {
                count.put(word, 1);
            } else {
                count.put(word, count.get(word) + 1);
            }
        }
        int len = words[0].length();
        
        int lastIndex = s.length() - words.length * len;
        for(int i = 0; i <= lastIndex; i++) {
            HashMap<String, Integer> copy = new HashMap<String, Integer>(count);
            int m = 0;
            for(int j = 0; j < words.length; j++) {
                int indent = j * len;
                String word = s.substring(i+indent, i + indent + len);
                if(copy.containsKey(word) && copy.get(word) > 0) {
                    copy.put(word, copy.get(word) - 1);
                    m++;
                } else {
                    break;
                }
            }
            if(m == words.length) result.add(i);
            
        }
        return result;
    }
}
