/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class Solution {
    public int depthSum(List<NestedInteger> nestedList) {
        int sum = 0;
        for(NestedInteger ns: nestedList) {
            sum += count(ns, 1);
        }
        return sum;
    }
    
    public int count(NestedInteger ni, int layer) {
        if(ni.isInteger()) return ni.getInteger() * layer;
        else {
            int sum = 0;
            List<NestedInteger> nested = ni.getList();
            for(NestedInteger niChild: nested){
                sum += count(niChild, layer+1);
            }
            return sum;
        }
    }
}
