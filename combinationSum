public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<Integer> current = new ArrayList<Integer>();
        Arrays.sort(candidates);
        dfs(result, current, target, candidates, 0);
        return result;
    }
    
    public void dfs(List<List<Integer>> result, List<Integer> current, int target, int[] candidates, int index) {
        if(target < 0) return;
        else if(target == 0) {
            result.add(new ArrayList(current));
        } else {
            for(int i = index; i< candidates.length; i++) {
                int num = candidates[i];
                current.add(num);
                dfs(result, current, target - num, candidates, i);
                current.remove(current.size()-1);
            }
        }
    }
}
