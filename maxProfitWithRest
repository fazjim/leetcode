public class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length < 2) return 0;
        int[] buy = new int[prices.length];
        int[] sell = new int[prices.length];
        int[] rest = new int[prices.length];
        buy[0] = -prices[0];
        sell[0] = 0;
        rest[0] = 0;
        int max = 0;
        for(int i = 1; i < prices.length; i++) {
            buy[i] = Math.max(buy[i-1], rest[i-1] -prices[i]);
            sell[i] = Math.max(sell[i-1], buy[i-1] + prices[i]);
            rest[i] = Math.max(buy[i-1], Math.max(rest[i-1], sell[i-1]));
            max = Math.max(sell[i], rest[i]);
        }
        return max;
    }
}

//Simplified version from Discuss
public int maxProfit(int[] prices) {
    int sell = 0, prev_sell = 0, buy = Integer.MIN_VALUE, prev_buy;
    for (int price : prices) {
        prev_buy = buy;
        buy = Math.max(prev_sell - price, prev_buy);
        prev_sell = sell;
        sell = Math.max(prev_buy + price, prev_sell);
    }
    return sell;
}

//V2
public class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length == 0) return 0;
        int buy = -prices[0];
        int sell = 0;
        int cool = 0;
        
        int max = 0;
        
        for(int i = 1; i < prices.length; i++) {
            int tempCool = Math.max(cool, Math.max(buy, sell));
            int tempBuy = Math.max(cool - prices[i], buy);
            int tempSell = Math.max(sell, buy + prices[i]);
            
            cool = tempCool;
            buy = tempBuy;
            sell = tempSell;
            
            max = Math.max(max, Math.max(cool, Math.max(buy, sell)));
        }
        
        return max;
        
    }
}
