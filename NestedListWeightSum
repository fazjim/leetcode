/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class Solution {
    public int depthSumInverse(List<NestedInteger> nestedList) {
        List<Integer> res = new ArrayList<Integer>();
        Queue<NestedInteger> queue = new LinkedList<NestedInteger>();
        for(NestedInteger ni: nestedList) {
            queue.offer(ni);
        }
        while(queue.size() > 0) {
            int size = queue.size();
            int sum = 0;
            for(int i = 0; i < size; i++) {
                NestedInteger item = queue.poll();
                if(item.isInteger()) {
                    sum += item.getInteger();
                } else {
                    List<NestedInteger> items = item.getList();
                    for(NestedInteger nItem: items) {
                        queue.offer(nItem);
                    }
                }
            }
            res.add(sum);
        }
        int answer = 0;
        for(int i = 0; i < res.size(); i++) {
            answer += res.get(i) * (res.size() - i);
        }
        return answer;
    }
}
