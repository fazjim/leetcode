public class Solution {
    public String rearrangeString(String str, int k) {
        int[] chars = new int[26];
        for(int i = 0; i < str.length(); i++) {
            chars[str.charAt(i) - 'a']++;
        }
        
        PriorityQueue<Node> pq = new PriorityQueue<Node>();
        for(int i = 0; i < 26; i++) {
            if(chars[i] > 0) {
                Node n = new Node((char)(i+'a'), chars[i]);
                pq.offer(n);
            }
        }
        Queue<Node> nq = new LinkedList<Node>();
        StringBuilder sb = new StringBuilder();
        while(pq.size() > 0) {
            Node node = pq.poll();
            node.count--;
            nq.offer(node);
            sb.append(node.c);
            if(nq.size()>=k) {
                Node n = nq.poll();
                if(n.count > 0)
                pq.offer(n);
            }
        }
        if(sb.length() != str.length()) return "";
        return sb.toString();
    }   
    class Node implements Comparable<Node>{
        char c;
        int count;
        
        Node(char c, int count) {
            this.c = c;
            this.count = count;
        }
        
        public int compareTo(Node n) {
            return n.count - this.count;
        }
    }
}
