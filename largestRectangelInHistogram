public class Solution {
    public int largestRectangleArea(int[] heights) {
        Stack<Node> stack = new Stack<Node>();
        int maxArea = 0;
        for(int i = 0; i < heights.length; i++) {
            if(stack.empty() || heights[i] > stack.peek().height) {
                stack.push(new Node(heights[i], i));
            } else {
                int lastIndex = i;
                while(!stack.empty() && stack.peek().height > heights[i]) {
                    Node temp = stack.pop();
                    lastIndex = temp.index;
                    int width = i - temp.index;
                    int area = width * temp.height;
                    maxArea = Math.max(area, maxArea);
                }
                stack.push(new Node(heights[i], lastIndex));
            }
        }
        while(!stack.empty()) {
            Node temp = stack.pop();
            int width = heights.length - temp.index;
            int area = width * temp.height;
            maxArea = Math.max(area, maxArea);
        }
        return maxArea;
    }
    
    class Node {
        int height;
        int index;
        Node(int height, int index) {
            this.height = height;
            this.index = index;
        }
    }
}
