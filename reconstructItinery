public class Solution {
    public List<String> findItinerary(String[][] tickets) {
        HashMap<String, PriorityQueue<String>> map = new HashMap<String, PriorityQueue<String>>();
        for(String[] ticket: tickets) {
            String from = ticket[0];
            String to = ticket[1];
            if(!map.containsKey(from)) {
                PriorityQueue<String> queue = new PriorityQueue<String>();
                map.put(from, queue);
            }
            map.get(from).offer(to);
        }
        
        List<String> result = new ArrayList<String>();
        helper("JFK", map, result);
        return result;
    }
    
    public void helper(String from, HashMap<String, PriorityQueue<String>> map, List<String> result) {
        PriorityQueue<String> queue = map.get(from);
        while(queue != null && queue.size() > 0) {
            String next = queue.poll();
            helper(next, map, result);
        }
        result.add(0, from);
    }
}

//Clearer solution from Discuss
public static List<String> findItinerary(String[][] tickets) {
    // construct graph
    HashMap<String, ArrayList<String>> graph = new HashMap<String, ArrayList<String>>();
    ArrayList<String> al = null;
    for (String[] ticket : tickets) {
        al = graph.get(ticket[0]);
        if (al == null) {
            al = new ArrayList<String>();
            graph.put(ticket[0], al);
        }
        al.add(ticket[1]);
    }
    for (ArrayList<String> curr : graph.values()) {
        Collections.sort(curr);
    }
    ArrayList<String> ans = new ArrayList<>();
    itineraryHelper("JFK", ans, graph, tickets.length + 1);
    return ans;
}

// n is how many stops totally should contain
public static boolean itineraryHelper(String curr, List<String> ans, HashMap<String, ArrayList<String>> graph, int n) {
    ans.add(curr);
    if (ans.size() >= n) {
        return true;
    }
    if (!graph.containsKey(curr) || graph.get(curr).isEmpty()) {
        return false;
    }
    ArrayList<String> arrivals = graph.get(curr);
    for (int i = 0; i < arrivals.size(); i++) { // iterate each arrival point
        String arrival = graph.get(curr).remove(i);
        if (itineraryHelper(arrival, ans, graph, n)) {
            return true;
        }
        ans.remove(ans.size() - 1); // backtrack
        arrivals.add(i, arrival);
    }
    return false;
}
