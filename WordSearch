public class Solution {
    public boolean exist(char[][] board, String word) {
        if(board.length <= 0) return false;
        int row = board.length;
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < board[i].length; j++) {
                if(dfs(board, word, 0, i, j)) return true;
            }
        }
        return false;
    }
    
    public boolean dfs(char[][] board, String word, int index, int i, int j){
        int[][] directions = {{-1,0},{1,0},{0,-1},{0,1}};
        if(i < 0 || i >= board.length || j < 0 || j >= board[0].length) {
            return false;
        }
        if(board[i][j] == word.charAt(index)) {
            if(index == word.length() - 1) return true;
            else {
                char tmp = board[i][j];
                board[i][j] = '-';
                boolean value = false;
                for(int ii = 0; ii < directions.length; ii++) {
                    int addX = directions[ii][0];
                    int addY = directions[ii][1];
                    if(dfs(board, word, index+1, i+addX, j + addY)) {
                        return true;
                    }
                }
                board[i][j] = tmp;
            }
        }
        return false;
    }
}

//version 2
public class Solution {
    public boolean exist(char[][] board, String word) {
        if(board.length == 0) return false;
         for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[i].length; j++) {
                if(dfs(board, i, j, word, 0)) return true;
            }
        }
        return false;
    }
    public boolean dfs(char[][] board, int i, int j, String word, int index) {
        if(index >= word.length()) return true;
        if(i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word.charAt(index)) return false;
        
        board[i][j] = '0';
        boolean val = dfs(board, i+1, j, word, index+1) || dfs(board, i-1, j, word, index+1) || dfs(board, i, j-1, word, index+1) || dfs(board, i, j+1, word, index+1);
        board[i][j] = word.charAt(index);
        return val;
    }
}
