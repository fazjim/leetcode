public class Solution {
    public String minWindow(String s, String t) {
        HashMap<Character, Integer> tIndex = new HashMap<Character, Integer>();
        HashSet<Character> tSet = new HashSet<Character>();
        for(int i = 0; i < t.length(); i++) {
            char c = t.charAt(i);
            if(!tIndex.containsKey(c)) {
                tIndex.put(c, 0);
            } 
            tIndex.put(c, tIndex.get(c) + 1);
            tSet.add(c);
        }

        int start = 0;
        int end = 0;
        int minSize = s.length() + 1;
        String minStr = "";
        
        while(end < s.length()) {
            while(end < s.length() && tSet.size() > 0) {
                char c= s.charAt(end);
                if(tIndex.containsKey(c)) {
                    int val = tIndex.get(c);
                    val--;
                    if(val == 0 && tSet.contains(c)) {
                        tSet.remove(c);
                    }
                    tIndex.put(c, val);
                }
                end++;
            }
            if(end == s.length() && tSet.size() > 0 && minSize > s.length()) return "";
            while(tSet.size() == 0) {
                char startC = s.charAt(start);
                if(tIndex.containsKey(startC)) {
                    tIndex.put(startC, tIndex.get(startC) + 1);
                    if(tIndex.get(startC) > 0) {
                        tSet.add(startC);
                    }
                }
                start++;
            }

            int length = end - start + 1; 
            if(length < minSize) {
                minSize = length;
                minStr = s.substring(start-1, end); 
            }
        }
        return minStr;
    }
}
