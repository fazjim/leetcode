public class Solution {
    public String addStrings(String num1, String num2) {
        if(num1.length() > num2.length()) {
            return addString(num2, num1);
        } else {
            return addString(num1, num2);
        }  
    }
    
    public String addString(String shortStr, String longStr) {
        int offSet = 0;
        int shortEnd = shortStr.length() - 1;
        int longEnd = longStr.length() - 1;
        StringBuilder sb = new StringBuilder();
        while(shortEnd >= 0 || longEnd >= 0) {
            int digitShort = 0;
            if(shortEnd >= 0)
                digitShort = (int) (shortStr.charAt(shortEnd) - '0');
            int digitLong = (int) (longStr.charAt(longEnd) - '0');
            int sum = digitShort + digitLong + offSet;
            offSet = sum / 10;
            char c = (char) ('0' + (sum % 10));
            sb.insert(0, c);
            shortEnd--;
            longEnd--;
        }
        if(offSet > 0) sb.insert(0, (char)('0' + offSet));
        return sb.toString();
    }
}


//v2
public class Solution {
    public String addStrings(String num1, String num2) {
        int cursor1 = num1.length() - 1;
        int cursor2 = num2.length() - 1;
        int carry = 0;
        StringBuilder builder = new StringBuilder();
        while(cursor1 >= 0 || cursor2 >= 0) {
            int d1 = 0;
            int d2 = 0;
            if(cursor1 >= 0) d1 = num1.charAt(cursor1) - '0';
            if(cursor2 >= 0) d2 = num2.charAt(cursor2) - '0';
            int d = d1 + d2 + carry;
            carry = d / 10;
            d = d % 10;
            builder.append(d);
            cursor1--;
            cursor2--;
        }
        if(carry != 0) builder.append(carry);
        return builder.reverse().toString();
    }
}
