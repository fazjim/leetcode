/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> paths = new ArrayList<String>();
        if(root != null) {
            String start = Integer.toString(root.val);
            TreeNode left = root.left;
            TreeNode right = root.right;
            if(left!=null) traverse(left, start, paths);
            if(right!=null) traverse(right, start, paths);
            if(left == null && right == null)  {
                paths.add(start);
            }
        }
        return paths;
    }
    
    public void traverse(TreeNode root, String str, List<String> paths) {
        String newStr = str + "->" + root.val;
        TreeNode left = root.left;
        TreeNode right = root.right;
        if(left == null && right == null) {
            paths.add(newStr);
        } else {
            if(left != null) {
                traverse(left, newStr, paths);
            } 
            if(right != null) {
                traverse(right, newStr, paths);
            }
        }
    }
}
