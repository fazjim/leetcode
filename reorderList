/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void reorderList(ListNode head) {
        if(head == null || head.next == null) return;
        ListNode midNode = findMid(head);
        ListNode lastHalf = midNode.next;
        midNode.next = null;
        lastHalf = reverse(lastHalf);
        ListNode dummy = new ListNode(0);
        ListNode cur = dummy;
        while(head != null || lastHalf != null) {
            if(head != null) {
                cur.next = head;
                head = head.next;
                cur = cur.next;
            }
            if(lastHalf != null) {
                cur.next = lastHalf;
                lastHalf = lastHalf.next;
                cur = cur.next;
            }
        }
        head = dummy.next;
    }
    
    public ListNode reverse(ListNode head) {
        ListNode pre = head;
        ListNode cur = head.next;
        pre.next = null;
        while(cur != null) {
            ListNode next = cur.next;
            cur.next = pre;
            pre = cur;
            cur = next;
        }
        return pre;
    }
    
    public ListNode findMid(ListNode head) {
        ListNode slow = head;
        ListNode fast = head.next;
        while(fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
}
