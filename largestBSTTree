/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    int maxCnt = 0;
    public int largestBSTSubtree(TreeNode root) {
        if(root == null) return 0;
        helper(root);
        return maxCnt;
    }
    
    public int[] helper(TreeNode root) {
        if(root.left == null && root.right == null) {
            maxCnt = Math.max(1, maxCnt);
            int[] vals = {root.val, root.val, 1};
            return vals;
        }
        int min = root.val;
        int max = root.val;
        int cnt = 1;
        if(root.left != null) {
            int[] lefts = helper(root.left);
            if(lefts[2] == 0 || lefts[1] >= root.val) {
                cnt = 0;
            } else {
                min = lefts[0];
                max = root.val;
                cnt += lefts[2];
            }
        }
        if(root.right != null) {
            int[] rights = helper(root.right);
            if(rights[2] == 0 || rights[0] <= root.val) {
                int[] vals = {root.val, root.val, 0};
                cnt = 0;
            } else {
                max = rights[1];
                cnt += rights[2];
            }
        }
        maxCnt = Math.max(cnt, maxCnt);
        int[] vals = {min, max, cnt};
        return vals;
    }
}
