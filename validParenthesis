public class Solution {
    public boolean isValid(String s) {
        ArrayDeque<Character> stack = new ArrayDeque<Character>();
        for(int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if(stack.size() == 0) {
                if(c == ')' || c == '}' || c == ']') return false;
                else stack.push(c);
            } else {
                if(c == ')' || c == '}' || c == ']') {
                    char top = stack.pop();
                    if(!isPair(top, c)) {
                        return false;
                    }
                } else {
                    stack.push(c);
                }
            }
        }
        return (stack.size() == 0);
    }
    
    public boolean isPair(char c, char c1) {
        if(c == '(' && c1 == ')') {
            return true;
        } else if(c == '{' && c1 == '}') {
            return true;
        } else if(c == '[' && c1 == ']') {
            return true;
        } else {
            return false;
        }
    }
}


//2nd trial
public class Solution {
    public boolean isValid(String s) {
        ArrayDeque<Character> stack = new ArrayDeque<Character>();
        for(int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if(c == '(' || c == '{' || c== '[') {
                stack.push(c);
            } else {
                if(stack.size() == 0) return false;
                else {
                    char topC = stack.pop();
                    if(!isPair(topC, c)) return false;
                }
            }
        }
        if(stack.size() != 0) return false;
        return true;
    }
    
    public boolean isPair(char topC, char c1) {
        if((topC == '(' && c1 == ')') || (topC == '[' && c1 == ']') || (topC == '{' && c1 == '}')) {
            return true;
        } else {
            return false;
        }
    }
    
    
    
}
