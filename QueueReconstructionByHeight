public class Solution {
    public int[][] reconstructQueue(int[][] people) {
        List<People> allPeople = new ArrayList<People>();
        int row = people.length;
        int[][] newQueue = new int[row][2];
        
        for(int i = 0; i < row; i++) {
            People p = new People();
            p.height = people[i][0];
            p.count = people[i][1];
            p.realCount = people[i][1];
            allPeople.add(p);
        }
        
        int index = 0;
        while(allPeople.size() > 0) {
            Collections.sort(allPeople);
            People first = allPeople.get(0);
            int height = first.height;
            for(int i = 1; i < allPeople.size(); i++) {
                People p = allPeople.get(i);
                if(p.height <= height) {
                    p.count--;
                }
            }
            newQueue[index][0] = first.height;
            newQueue[index][1] = first.realCount;
            allPeople.remove(0);
            index++;
        }
        return newQueue;
    }
    
}

class People implements Comparable<People>{
    int height;
    int count;
    int realCount;
    
    public int compareTo(People p) {
        if(count - p.count != 0) return (count- p.count);
        return height - p.height;
    }
}


//Faster solution from Discuss
public class Solution {
    public int[][] reconstructQueue(int[][] people) {
        int[][] result = new int[people.length][];
        List<int[]> list = new ArrayList<int[]>();
        /*use a pq to sort all the people based on h*/
        PriorityQueue<int[]> queue = new PriorityQueue<int[]>(new listComparator());
        for(int i = 0; i < people.length; i++){
            queue.offer(people[i]);
        }
        /*insertion sort based on k*/
        while(queue.size() != 0){
            insert(list, queue.poll());
        }
        for(int i = 0; i < people.length; i++){
            result[i] = list.get(i);
        }
        return result;
    }
    
    /*insertion sort based on k*/
    private void insert(List<int[]> list, int[] element){
        if(list.size() == 0) {
            list.add(element);
            return;
        }
        int count = 0;
        for(int i = 0; i < list.size(); i++){
            if(count == element[1]){
                list.add(i, element);
                return;
            }else if(list.get(i)[0] >= element[0]){
                count++;
            }
        }
        list.add(element);
    }
    
    /*pq comparator class*/
    class listComparator implements Comparator<int[]>{
        public int compare(int[] first, int[] second){
            if(first[0] != second[0])  return second[0] - first[0];
            else return first[1] - second[1];
        }
    }
}
