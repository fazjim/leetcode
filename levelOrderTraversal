/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 
 //From discussion, actually no need to use two queues, just use one queue and the queue size to set the layer
 public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<Integer> list;
        ArrayList<TreeNode> q = new ArrayList<TreeNode>();
        if (root != null) {
            q.add(root);
        }
        int size;
        TreeNode tmp;
        while(!q.isEmpty()) {
            size = q.size();
            list = new ArrayList<Integer>();
            while(size > 0) {
                tmp = q.remove(0);
                if (tmp.left != null) {
                    q.add(tmp.left);
                }            
                if(tmp.right != null) {
                    q.add(tmp.right);
                }
                list.add(tmp.val);
                size--;
            }
            result.add(0, list);
        }
        return result;
    }
 
 //Using Queue will be clearer
public class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<TreeNode> currentLayer = new ArrayList<TreeNode>();
        List<TreeNode> nextLayer = new ArrayList<TreeNode>();
        
        List<List<Integer>> lists = new ArrayList<List<Integer>>();
        List<Integer> currentList = new ArrayList<Integer>();
        if(root == null) return lists;
        
        currentLayer.add(root);
        for(int i = 0; i < currentLayer.size(); i++) {
            TreeNode node = currentLayer.get(i);
            int val = node.val;
            currentList.add(val);
            TreeNode left = node.left;
            TreeNode right = node.right;
            if(left != null) nextLayer.add(left);
            if(right != null) nextLayer.add(right);
            if(i == currentLayer.size() - 1) {
                lists.add(currentList);
                currentList = new ArrayList<Integer>();
                currentLayer = nextLayer;
                i = -1;
                nextLayer = new ArrayList<TreeNode>();
            }
        }
        
        List<List<Integer>> reverseList = new ArrayList<List<Integer>>();
        for(int i = lists.size()-1; i >= 0; i--) {
            reverseList.add(lists.get(i));
        }
        return reverseList;
    }
}

