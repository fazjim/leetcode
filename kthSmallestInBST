/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int getCount(TreeNode root) {
        if(root == null) return 0;
        else  return getCount(root.left) + getCount(root.right) + 1;
    }

    public int kthSmallest(TreeNode root, int k) {
       int count = getCount(root.left);
       if(count == k-1) return root.val;
       else if(count < k-1) {
           return kthSmallest(root.right, k - count - 1);
       } else {
           return kthSmallest(root.left, k);
       }
    }
}

//Another solution from Discuss
private static int number = 0;
    private static int count = 0;

    public int kthSmallest(TreeNode root, int k) {
        count = k;
        helper(root);
        return number;
    }
    
    public void helper(TreeNode n) {
        if (n.left != null) helper(n.left);
        count--;
        if (count == 0) {
            number = n.val;
            return;
        }
        if (n.right != null) helper(n.right);
    }
