public class Solution {
    public int lengthLongestPath(String input) {
        int longestLength = 0;
        int currentLength = 0;
        Stack<Integer> pathStack = new Stack<Integer>();
        int tagLength = 0;
        int depth = 0;
        boolean isFile = false;
        input = input + "\n";
        for(int i = 0; i < input.length(); i++) {
            char c = input.charAt(i);
            if(c == '\n') {
                int toPop = pathStack.size() - depth;
                for(int j = 0; j < toPop; j++) {
                        int pop = pathStack.pop();
                        currentLength = currentLength - pop;
               }
               if(isFile) { 
                   int fileLength = currentLength + tagLength;
                   if(fileLength > longestLength) longestLength = fileLength;
               } else {
                   currentLength += tagLength + 1;
                   pathStack.push(tagLength + 1);
               }
               depth = 0;
               isFile = false;
               tagLength = 0;
            } else if(c == '\t') {
                depth++;
            } else if(c == '.') {
                isFile = true;
                tagLength++;
            } else {
                tagLength++;
            }
        }
        return longestLength;
    }
}

//2nd trial
public class Solution {
    public int lengthLongestPath(String input) {
        int maxLength = 0;
        int currentLength = 0;
        int currentLayer = -1;
        Deque<Integer> stack = new ArrayDeque<Integer>();
        int i = -1;
        while(i < input.length()) {
            if(i == -1 || input.charAt(i) == '\n') {
                int length = 0;
                int layer = 0;
                i++;
                boolean isFile = false;
                while(i < input.length() && input.charAt(i) == '\t') {
                    layer++;
                    i++;
                }
                while(i < input.length() && input.charAt(i) != '\n') {
                    if(input.charAt(i) == '.') isFile = true;
                    length++;
                    i++;
                }
                            
                if(layer <= currentLayer) {
                    int popSize = currentLayer - layer + 1;
                    while(popSize != 0 && stack.size() > 0) {
                        currentLength -= stack.pop();
                        if(stack.size() > 0) currentLength--;
                        popSize--;
                    }
                }
                if(stack.size() > 0) currentLength++;
                stack.push(length);
                currentLength += length;
                currentLayer = layer;
                if(currentLength > maxLength && isFile) {
                    maxLength = currentLength;        
                }
            }
        }
        return maxLength;
    }
}
