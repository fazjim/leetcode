/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class NestedIterator implements Iterator<Integer> {
    Stack<Integer> indexStack = new Stack<Integer>();
    Stack<List<NestedInteger>> nestStack = new Stack<List<NestedInteger>>();
    List<NestedInteger> currentList;
    int index = 0;
    
    public NestedIterator(List<NestedInteger> nestedList) {
        currentList = nestedList;
    }

    @Override
    public Integer next() {
        if(index < currentList.size()) {
            NestedInteger currentInteger = currentList.get(index);
            index++;
            if(currentInteger.isInteger()) {
                return currentInteger.getInteger();
            } else {
                List<NestedInteger> nests = currentInteger.getList();
                indexStack.push(index);
                nestStack.push(currentList);
                index = 0;
                currentList = nests;
                return next();
            }
        } else {
            currentList = nestStack.pop();
            index = indexStack.pop();
            return next();
        }
    }

    @Override
    public boolean hasNext() {
        if(index < currentList.size()) {
            NestedInteger currentInteger = currentList.get(index);
            if(currentInteger.isInteger()) {
                return true;
            } else {
                List<NestedInteger> nested = currentInteger.getList();
                index++;
                indexStack.push(index);
                nestStack.push(currentList);
                index = 0;
                currentList = nested;
                return hasNext();
            }
        } else {
            if(nestStack.empty()) {
                return false;
            } else {
                currentList = nestStack.pop();
                index = indexStack.pop();
                return hasNext();
            }
        }
    }
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.hasNext()) v[f()] = i.next();
 */
