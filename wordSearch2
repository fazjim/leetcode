public class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        List<String> result = new ArrayList<String>();
        if(board.length == 0) return result;
        TrieNode root = buildTrieTree(words);

        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[i].length; j++) {
                StringBuilder sb = new StringBuilder();
                dfs(board, sb, result, root, i, j);
            }
        }
        return result;
    }
   
    public void dfs(char[][] board, StringBuilder sb, List<String> result, TrieNode node, int i, int j) {
        if(node.isWord && !node.isVisited) {
            result.add(sb.toString());
            node.isVisited = true;
        } 
        if(i < 0 || i >= board.length || j < 0 || j >= board[0].length) {
            return;
        } else {
            node = node.getNode(board[i][j]);
            if(node == null) return;
            char tmp = board[i][j];
            sb.append(board[i][j]);
            board[i][j] = '0';
            dfs(board, sb, result, node, i+1, j);
            dfs(board, sb, result, node, i-1, j);
            dfs(board, sb, result, node, i, j-1);
            dfs(board, sb, result, node, i, j+1);
            board[i][j] = tmp;
            sb.deleteCharAt(sb.length()-1);
        }
        
    }  
   
    
    public TrieNode buildTrieTree(String[] words) {
        TrieNode root = new TrieNode();
        for(String word: words) {
            addWord(root, word);
        }
        return root;
    }
    
    public void addWord(TrieNode node, String word) {
        addWordHelper(node, word, 0);
    }
    
    public void addWordHelper(TrieNode node, String word, int index) {
        if(index >= word.length()) {
            node.isWord = true;
            return;
        }
        char c = word.charAt(index);
        if(node.getNode(c) == null) {
            node.addNode(c);
        }
        TrieNode next = node.getNode(c);
        addWordHelper(next, word, index+1);
    }
    
    public boolean hasWord(TrieNode root, String word) {
        int index = 0;
        TrieNode node = root;
        while(true) {
            if(index >= word.length()) return true;
            char c = word.charAt(index);
            node = node.getNode(c);
            if(node == null) return false;
            index++;
        }
    }
}

class TrieNode {
    TrieNode[] subs = new TrieNode[26];
    boolean isWord = false;
    boolean isVisited = false;
    
    public TrieNode getNode(char c) {
        int index = c - 'a';
        if(index < 0 || index > 25) return null;
        return subs[index];
    }

    public void addNode(char c) {
        int index = c - 'a';
        subs[index] = new TrieNode();
    }
}
