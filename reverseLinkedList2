/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if(head == null || head.next == null) return head;
        if(m >= n) return head;
        ListNode lastBack = null;
        ListNode tail = null;
        int counter = 1;
        ListNode dummy = null;
        ListNode curr = head;
        while(curr != null) {
            if(counter < m) {
                dummy = curr;
                curr = curr.next;
            }else if(counter == m) {
                tail = curr;
                lastBack = tail;
                curr = curr.next;
            } else if(counter <= n) {
                ListNode tmp = curr;
                curr = curr.next;
                tmp.next = lastBack;
                lastBack = tmp;
            } else {
                break;
            }
            counter++;
        }
        tail.next = curr;
        if(dummy != null) {
            dummy.next = lastBack;
        } else {
            head = lastBack;
        }
        return head;
    }
}

//Clearer solution from Discuss
public ListNode reverseBetween(ListNode head, int m, int n) {
        if (head == null || m < 1 || n <= m) {
            return head;
        }

        int count = n - m +1;
        ListNode savedHead = head;
        ListNode newHead, tail, curr, mPre = null;
        int tempM = m;
        while (--tempM > 0) {
            mPre = head;
            head = head.next;
        }

        newHead = head;
        tail = newHead;
        curr = newHead.next;

        while (--count > 0 && curr != null) {
            ListNode next = curr.next;
            curr.next = newHead;
            newHead = curr;
            curr = next;
        }

        tail.next = curr;

        if (m == 1) {
            return newHead;
        }

        mPre.next = newHead;

        return savedHead;
    }
