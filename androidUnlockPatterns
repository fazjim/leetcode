public class Solution {
    int result = 0;
    public int numberOfPatterns(int m, int n) {
        boolean[] visited = new boolean[10];
        int[][] jumps = new int[10][10];
        jumps[1][3] = jumps[3][1] = 2;
        jumps[1][7] = jumps[7][1] = 4;
        jumps[4][6] = jumps[6][4] = 5;
        jumps[2][8] = jumps[8][2] = 5;
        jumps[3][9] = jumps[9][3] = 6;
        jumps[7][9] = jumps[9][7] = 8;
        jumps[1][9] = jumps[9][1] = jumps[3][7] = jumps[7][3] = 5;
        dfs(jumps, visited, m, n, 0, -1);
        return result;
    }
    
    public void dfs(int[][] jumps, boolean[] visited, int m, int n, int currLen, int lastKey) {
        if(currLen > n) return;
        if(currLen >= m) result++;
        for(int next = 1; next <= 9; next++) {
            if(visited[next]) continue;
            if(lastKey == -1 || jumps[lastKey][next] == 0 || visited[jumps[lastKey][next]]) {
                visited[next] = true;
                dfs(jumps, visited, m, n, currLen+1, next);
                visited[next] = false;
            }
        }
    }
}
