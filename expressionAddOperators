public class Solution {
    public List<String> addOperators(String num, int target) {
        List<String> result = new ArrayList<String>();
        String path = "";
        dfs(result, path, num, target, 0, 0, 0);
        return result;
    }
    
    public void dfs(List<String> result, String path, String num, int target, int pos, long currValue, long last) {
        if(pos == num.length()) {
            if(currValue == target) {
                result.add(path);
            }
        } else {
            for(int i = pos; i < num.length(); i++) {
                if(num.charAt(pos) == '0' && i != pos) break;
                long val = Long.parseLong(num.substring(pos, i+1));
                if(pos == 0) {
                    dfs(result, path + val, num, target, i+1, val, val); 
                } else {
                    dfs(result, path + "+" + val, num, target, i+1, currValue + val, val);
                    dfs(result, path + "-" + val, num, target, i+1, currValue - val, -val);
                    dfs(result, path + "*" + val, num, target, i+1, currValue - last + last * val, last*val);
                } 
            }
        }
    }
}
