public class Solution {
    public int numberOfBoomerangs(int[][] points) {
        int count = 0;
        int[][] dists = new int[points.length][points.length];
        for(int i = 0; i < points.length; i++) {
            for(int j = 0; j < points.length; j++) {
                dists[i][j] = Integer.MIN_VALUE;
            }
        }
        for(int i = 0; i < points.length; i++) {
            for(int j = 0; j < points.length; j++) {
                calcDist(points, i, j, dists);
            }
        }
        
        for(int i = 0; i < points.length; i++) {
            HashMap<Integer, Integer> counts = new HashMap<Integer, Integer>();
            for(int j = 0; j < points.length; j++) {
                if(j != i) {
                    int dist = dists[i][j];
                    if(!counts.containsKey(dist)) {
                        counts.put(dist, 1);
                    } else {
                        counts.put(dist, counts.get(dist) + 1);
                    }
                }
            }
            
            Iterator<Integer> it = counts.keySet().iterator();
            while(it.hasNext()) {
                int val = counts.get(it.next());
                if(val > 1) {
                    count += getPermute2(val);
                }
            }
        }
        return count;
    }
    
    
    public int getPermute2(int n) {
        return n * (n-1);
    }
    
    public int calcDist(int[][] points, int i, int j, int[][] dists) {
        if(dists[i][j] != Integer.MIN_VALUE) {
            return dists[i][j];
        } else {
            int x = points[i][0] - points[j][0];
            int y = points[i][1] - points[j][1];
            int dist = x*x + y*y;
            dists[i][j] = dist;
            dists[j][i] = dist;
            return dist;
        }
    }
}

//v2
public class Solution {
    public int numberOfBoomerangs(int[][] points) {
        HashMap<Integer, Integer> freq = new HashMap<Integer, Integer>();
        int count = 0;
        for(int i = 0; i < points.length; i++) {
            freq.clear();
            for(int j = 0; j < points.length; j++) {
                if(i != j) {
                    int d = calcDist(points[i], points[j]);
                    if(freq.containsKey(d)) {
                        freq.put(d, freq.get(d) + 1);
                    } else {
                        freq.put(d, 1);
                    }
                }
            }
            Iterator<Integer> it = freq.keySet().iterator();
            while(it.hasNext()) {
                int d = it.next();
                int val = freq.get(d);
                count += val * (val - 1);
            }
        }
        return count;
    }
    
    public int calcDist(int[] point1, int[] point2) {
        int dx = point1[0] - point2[0];
        int dy = point1[1] - point2[1];
        return dx*dx + dy*dy;
    }
}
