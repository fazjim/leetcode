public class Solution {
    public boolean isValidSudoku(char[][] board) {
       for(int i = 0; i < 9;i++) {
           if(!validateRow(board, i) || !validateColumn(board, i)) return false;
       }
       for(int i = 0; i < 9; i+= 3) {
           for(int j = 0; j < 9; j += 3) {
               if(!validateBlock(board, i, j)) return false;
           }
       }
       return true;
    }
    
    public boolean validateBlock(char[][] board, int row, int column) {
        int[] validator = new int[9];
        for(int i = row; i < row + 3; i++) {
            for(int j = column; j < column + 3; j++) {
                char c = board[i][j];
                if(c != '.') {
                    int index = (int) (c - '0');
                    index--;
                    if(validator[index] != 0) return false;
                    else validator[index] = 1;
                }
            }
        }
        return true;
    }
    
    public boolean validateRow(char[][] board, int row) {
        int[] validator = new int[9];
        for(int j = 0; j < 9; j++) {
                char c = board[row][j];
                if(c != '.') {
                    int index = (int) (c - '0');
                    index--;
                    if(validator[index] != 0) return false;
                    else validator[index] = 1;
                }
        }
        return true;
    }
    
    public boolean validateColumn(char[][] board, int column) {
        int[] validator = new int[9];
        for(int j = 0; j < 9; j++) {
                char c = board[j][column];
                if(c != '.') {
                    int index = (int) (c - '0');
                    index--;
                    if(validator[index] != 0) return false;
                    else validator[index] = 1;
                }
        }
        return true;
    }
}
