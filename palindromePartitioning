public class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<List<String>>();
        List<String> current = new ArrayList<String>();
        helper(s, 0, result, current);
        return result;
    }
    
    public void helper(String s, int start, List<List<String>> result, List<String> current) {
        if(start >= s.length()) {
            result.add(new ArrayList(current));
        } else {
            for(int i = start; i < s.length(); i++) {
                if(isPalindrome(s, start, i)) {
                    current.add(s.substring(start, i+1));
                    helper(s, i+1, result, current);
                    current.remove(current.size()-1);
                }
            }
        }
    }
    
    public boolean isPalindrome(String s, int start, int end) {
        while(start <= end && s.charAt(start) == s.charAt(end)) {
            start++;
            end--;
        }
        if(start > end) return true;
        return false;
    }
}
