/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void flatten(TreeNode root) {
        if(root == null) return;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.push(root);
        TreeNode dummy = new TreeNode(0);
        TreeNode temp = null;
        dummy.right = temp;
        while(!stack.empty()) {
            TreeNode node = stack.pop();
            if(temp == null) {
                temp = node;
            } else {
                temp.left = null;
                temp.right = node;
                temp = node;
            }
            if(node.right != null)
                stack.push(node.right);
            if(node.left != null)
                stack.push(node.left);
        }
        root = dummy.right;
    }
}

//recursive
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void flatten(TreeNode root) {
        if(root == null) return;
        TreeNode right = root.right;
        root.right = null;
        if(root.left != null) {
            root.right = root.left;
            root.left = null;
            flatten(root.right);
        } 
        if(right != null) {
            TreeNode toRight = root;
            while(toRight.right != null) {
                toRight = toRight.right;
            }
            toRight.right = right;
            flatten(right);
        }
    }
}
