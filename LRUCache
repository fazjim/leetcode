//TLE solution of single linked list
public class LRUCache {
    int maxSize = 0;
    int currentSize = 0;
    ListNode dummyNode;
    ListNode end;
    public LRUCache(int capacity) {
        dummyNode = new ListNode();
        end = dummyNode;
        maxSize = capacity;
    }
    
    public int get(int key) {
       ListNode node = getNode(key);
       if(node == null) return -1;
       else return node.val;
    }
    
    public ListNode getNode(int key) {
        ListNode curr = dummyNode.next;
        ListNode prev = dummyNode;
        while(curr != null) {
            if(curr.key == key) {
                if(curr != end) {
                    prev.next = curr.next;
                    end.next = curr;
                    curr.next = null;
                    end = curr;
                }
                return curr;
            }
            prev = curr;
            curr = curr.next;
        }
        return curr;
    }
    
    public void set(int key, int value) {
        ListNode node = getNode(key);
        if(node != null) {
            node.val = value;
        } else {
            ListNode newNode = new ListNode(key, value);
            end.next = newNode;
            end = newNode;
            currentSize++;
            if(currentSize > maxSize) {
                dummyNode.next = dummyNode.next.next;
                currentSize--;
            }
        }
    }
}

class ListNode {
    int key;
    int val;
    ListNode next;
    
    ListNode()  {}
    ListNode(int key, int val) {
        this.key = key;
        this.val = val;
    }
}
