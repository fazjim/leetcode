//TLE dfs version
public class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
       return dfs(s1, s2, 0, 0, s3, 0);
    }
    
    
    public boolean dfs(String s1, String s2, int s1Index, int s2Index, String s3, int s3Index) {
        if(s1Index == s1.length() && s2Index == s2.length() && s3Index == s3.length()) return true;
        boolean value = false;
        if(s1Index < s1.length() && s3Index < s3.length() && s3.charAt(s3Index) == s1.charAt(s1Index)) {
            if(dfs(s1, s2, s1Index+1, s2Index, s3, s3Index+1)) return true;
        }
        if(s2Index < s2.length() && s3Index < s3.length() && s3.charAt(s3Index) == s2.charAt(s2Index)) {
            if(dfs(s1, s2, s1Index, s2Index+1, s3, s3Index+1)) return true;
        }
        return false;
    }
}

//dp version
public class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
       int len1 = s1.length();
       int len2 = s2.length();
       if(len1 + len2 != s3.length()) return false;
       boolean[][] dp = new boolean[len1+1][len2+1];
       dp[0][0] = true;
       for(int i = 0; i <= len1; i++) {
           for(int j = 0; j <= len2; j++) {
               if(i == 0 && j == 0) continue;
               int s3Index = i + j - 1;
               if(i >= 1 && s3.charAt(s3Index) == s1.charAt(i-1) && dp[i-1][j]) {
                   dp[i][j] = true;
               }
               if(j >= 1 && s3.charAt(s3Index) == s2.charAt(j-1) && dp[i][j-1]) {
                   dp[i][j] = true;
               }
           }
       }
       return dp[len1][len2];
    }
    
    
    
}
