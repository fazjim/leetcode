// Java Iterator interface reference:
// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html
class PeekingIterator implements Iterator<Integer> {
    int peekValue;
    boolean loaded = false;
    Iterator<Integer> iter;
    
	public PeekingIterator(Iterator<Integer> iterator) {
	    // initialize any member here.
	    iter = iterator;
	}

    // Returns the next element in the iteration without advancing the iterator.
	public Integer peek() {
	    if(!loaded) hasNext();
        return peekValue;
	}

	// hasNext() and next() should behave the same as in the Iterator interface.
	// Override them if needed.
	@Override
	public Integer next() {
	    if(!loaded)
	        peekValue = iter.next();
	    loaded = false;
	    return peekValue;
	}

	@Override
	public boolean hasNext() {
	    boolean hasNext = iter.hasNext();
	    if(hasNext) {
	        if(!loaded) {
	            loaded = true;
	            peekValue = iter.next();
	        }
	    }
	    return (hasNext | loaded);
	}
}

//2nd trial
// Java Iterator interface reference:
// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html
class PeekingIterator implements Iterator<Integer> {
    Integer peekValue = null;
    Iterator<Integer> iterator;
    
	public PeekingIterator(Iterator<Integer> iterator) {
	    // initialize any member here.
	    this.iterator = iterator;
	}

    // Returns the next element in the iteration without advancing the iterator.
	public Integer peek() {
	    if(peekValue == null) {
	        peekValue = iterator.next();
	    }
	    return peekValue;
	}

	// hasNext() and next() should behave the same as in the Iterator interface.
	// Override them if needed.
	@Override
	public Integer next() {
	  Integer nextValue = peekValue;
	  if(nextValue == null) {
	     nextValue = iterator.next();
	  } else {
	     peekValue = null;
	  }
	  return nextValue;
	}

	@Override
	public boolean hasNext() {
	   if(!iterator.hasNext() && peekValue == null) return false;
	   return true;
	}
}
