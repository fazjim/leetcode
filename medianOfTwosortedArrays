public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int length1 = nums1.length;
        int length2 = nums2.length;
        
        int total = length1 + length2;
        int k = total / 2 + 1;
        int med = findKth(nums1, nums2, 0, length1 - 1, 0, length2 - 1, k);
        if(total % 2 == 1) {
            //has a median
            return med * 1.0;
        } else {
            int med1 = findKth(nums1, nums2, 0, length1 - 1, 0, length2 - 1, k-1);
            return ((med + med1) * 1.0) / 2;
        }
    }
    
    public int findKth(int[] nums1, int[] nums2, int l1, int r1, int l2, int r2, int k) {
        if(l1 > r1) {
            return nums2[l2 + k - 1];
        } else if(l2 > r2) {
            return nums1[l1 + k - 1];
        } else {
            int mid1 = (l1 + r1) / 2;
            int mid2 = (l2 + r2) / 2;
            
            int length = mid1 - l1 + mid2 - l2 + 1;
            
            if(nums1[mid1] < nums2[mid2]) {
                if(k <= length) {
                    return findKth(nums1, nums2, l1, r1, l2, mid2-1, k);
                } else {
                    return findKth(nums1, nums2, mid1 + 1, r1, l2, r2, k - (mid1 - l1 + 1));
                }
            } else {
                if(k <= length) {
                    return findKth(nums1, nums2, l1, mid1 - 1, l2, r2, k);
                } else {
                    return findKth(nums1, nums2, l1, r1, mid2 + 1, r2, k - (mid2 - l2 + 1));
                }
            }
        }
    }
}
