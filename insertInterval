/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        List<Interval> newIntervals = new ArrayList<Interval>();
        int start = newInterval.start;
        int end = newInterval.end;
        boolean inserted = false;
        for(Interval interval: intervals) {
            if(interval.end < start) {
                newIntervals.add(interval);
            } else if(interval.start > end) {
                if(!inserted)
                    newIntervals.add(new Interval(start, end));
                newIntervals.add(interval);
                inserted = true;
            } else {
                start = Math.min(start, interval.start);
                end = Math.max(end, interval.end);
            }
        }
        if(!inserted) newIntervals.add(new Interval(start, end));
        return newIntervals;
    }
    

}
