import java.util.*;

public class Twitter {
    private Hashtable<Integer, HashSet<Integer>> followerIndex;
    private Hashtable<Integer, HashSet<Integer>> followeeIndex;
    private Hashtable<Integer, Integer> tweetIndex;
    private Hashtable<Integer, List<Integer>> userTweets;
    private int latestIndex = 0;

    /** Initialize your data structure here. */
    public Twitter() {
        followerIndex = new Hashtable<Integer, HashSet<Integer>>();
        followeeIndex = new Hashtable<Integer, HashSet<Integer>>();
        tweetIndex = new Hashtable<Integer, Integer>();
        userTweets = new Hashtable<Integer, List<Integer>>();
    }
    
    public void constructUserProfiles(int userId) {
        HashSet<Integer> followers = new HashSet<Integer>();
        HashSet<Integer> followees = new HashSet<Integer>();
        List<Integer> tweets = new ArrayList<Integer>();
        followerIndex.put(userId, followers);
        followeeIndex.put(userId, followees);
        userTweets.put(userId, tweets);
    }
    
    /** Compose a new tweet. */
    public void postTweet(int userId, int tweetId) {
        if(!userTweets.containsKey(userId)) {
            constructUserProfiles(userId);
        }
        if(tweetIndex.containsKey(tweetId)) {
            System.err.println("Something is wrong");
        } else {
            tweetIndex.put(tweetId, latestIndex);
            latestIndex++;
            userTweets.get(userId).add(tweetId);
        }
    }
    
    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */
    public List<Integer> getNewsFeed(int userId) {
        HashSet<Integer> followees = followeeIndex.get(userId);
        List<Integer> allNewsSource = new ArrayList<Integer>();
        List<Integer> newTweets = new ArrayList<Integer>();
        if(followees!=null) {
        for(Integer followee: followees) {
            allNewsSource.add(followee);
        }
        }
        allNewsSource.add(userId);
        int[] sourceMoves = new int[allNewsSource.size()];
        for(int i = 0;i < sourceMoves.length; i++) {
            sourceMoves[i] = 0;
        }
        int totalMoves = 0;
        while(totalMoves < 10) {
            int latest = -1;
            int moveIndex = -1;
            int latestTweet = -1;
            for(int i = 0;i<sourceMoves.length;i++) {
                int sourceId = allNewsSource.get(i);
                int move = sourceMoves[i];
                List<Integer> tweets = userTweets.get(sourceId);
                if(tweets!=null && tweets.size()>move) {
                   int tweetId = tweets.get(tweets.size()-1-move);
                   int timestamp = tweetIndex.get(tweetId);
                   if(timestamp > latest) {
                       latest = timestamp;
                       moveIndex = i;
                       latestTweet = tweetId;
                   }
                } 
            }
            if(moveIndex!=-1) {
                sourceMoves[moveIndex] = sourceMoves[moveIndex] + 1;
                newTweets.add(latestTweet);
                totalMoves++;
            } else {
                break;
            }
        }
        return newTweets;
    }
    
    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */
    public void follow(int followerId, int followeeId) {
        if(followerId!=followeeId) {
        if(!followerIndex.containsKey(followeeId)) {
            constructUserProfiles(followeeId);
        }
        if(!followeeIndex.containsKey(followerId)) {
            constructUserProfiles(followerId);
        }
        followerIndex.get(followeeId).add(followerId); //add follower as a member of followers of followee
        followeeIndex.get(followerId).add(followeeId); //add followee as a member of followees of follower
        }
    }
    
    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */
    public void unfollow(int followerId, int followeeId) {
        if(followerId != followeeId) {
        if(followerIndex.containsKey(followeeId)) {
            followerIndex.get(followeeId).remove(followerId);
        }
        if(followeeIndex.containsKey(followerId)) {
            followeeIndex.get(followerId).remove(followeeId);
        }
        }
    }
}

/**
 * Your Twitter object will be instantiated and called as such:
 * Twitter obj = new Twitter();
 * obj.postTweet(userId,tweetId);
 * List<Integer> param_2 = obj.getNewsFeed(userId);
 * obj.follow(followerId,followeeId);
 * obj.unfollow(followerId,followeeId);
 */
