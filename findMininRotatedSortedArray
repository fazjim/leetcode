public class Solution {
    public int findMin(int[] nums) {
        if(nums.length == 0) return 0;
        return findMinHelper(nums, 0, nums.length - 1);
    }
    
    public int findMinHelper(int[] nums, int start, int end) {
        if(start == end) return nums[start];
        if(end - start == 1) {
            return Math.min(nums[start], nums[end]);
        }
        int mid = (start + end) / 2;
        if(nums[mid] > nums[end]) {
            return findMinHelper(nums, mid, end);
        } else {
            return findMinHelper(nums, start, mid);
        }
    }
}

//Another solution from Discuss
public class Solution {
    public int findMin(int[] nums) {
        int left = 0;
        int right = nums.length - 1;
        int mid = 0;
        while(left < right){
            mid = (left + right)/2;
            if(nums[mid] > nums[right]) left = mid + 1;
            else right = mid;
        }
        return nums[left];
    }
}
