//dynmaic programming may improve the results, consider table[i][j] representing the results of string i to j
public class Solution {
    public String longestPalindrome(String s) {
        //s less than 1000, so supports expanding at each spot
        int max = 0;
        int loc = 0;
        for(int i = 0;i<s.length();i++) {
            int val = getPalindromeLength(s,i);
            if(val>max) {
                max = val;
                loc = i;
            }
        }
        int width = max/2;
        if(max%2 == 1){
            //centroid
            return s.substring(loc-width, loc+width+1);
        } else {
            return s.substring(loc-width+1,loc+width+1);
        }
    }
    
    public int getPalindromeLength(String s, int index) {
        int left = index-1;
        int right = index+1;
        int centroidLength = 0;
        while(left>=0&& right<=s.length()-1) {
            if(s.charAt(left)==s.charAt(right)) {
                centroidLength++;
            } else {
                break;
            }
            left--;
            right++;
        }
        centroidLength = centroidLength*2+1;
        
        int nocenterLength = 0;
        right = index+1;
        while(index>=0&&right<=s.length()-1) {
            if(s.charAt(index)==s.charAt(right)){
                nocenterLength++;
            } else {
                break;
            }
            index--;
            right++;
        }
        nocenterLength *= 2;
        
        if(centroidLength>nocenterLength) return centroidLength;
        else return nocenterLength;
    }
}

//Manacher's algorithm
public class Solution {
    public String longestPalindrome(String s) {
        char[] arr = createArray(s);
        int[] lps = new int[arr.length];
        
        int c = 0;
        int r = 0;
        int maxL = 0;
        int maxC = 0;
        for(int i = 1; i < lps.length; i++) {
            int m = 0;
            int n = 0;
            if(i > r) {
                lps[i] = 0;
                m = i-1;
                n = i + 1;
            } else {
                int left = c * 2 - i;
                int val = lps[left];
                if( i + val <= r) {
                    lps[i] = val;
                } else {
                    lps[i] = r - i;
                    m = i - lps[i] - 1;
                    n = i + lps[i] + 1;
                }
            }
            
            while(m >= 0 && n < arr.length && arr[m] == arr[n]) {
                m--;
                n++;
                lps[i]++;
            }
            if(lps[i] > maxL) {
                maxL = lps[i];
                maxC = i;
            }
            if(i + lps[i] > r) {
                r = lps[i];
                c = i;
            }
        }
        
        return extractStr(arr, maxC, maxL);
    }
    
    public char[] createArray(String s) {
        char[] arr = new char[2*s.length() + 1];
        arr[0] = ' ';
        for(int i = 0; i < s.length(); i++) {
            arr[i*2 + 1] = s.charAt(i);
            arr[i*2 + 2] = ' ';
        }
        return arr;
    }
    
    public String extractStr(char[] arr, int c, int l) {
        int left = c - l;
        int right = c + l;
        StringBuilder sb = new StringBuilder();
        for(int i = left; i <= right; i++) {
            if(i % 2 == 1) {
                sb.append(arr[i]);
            }
        }
        return sb.toString();
    }
    
  
}
